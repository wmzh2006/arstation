/********************************************************************
 * This file is generated by program cap
 * Please do not change it directly
 * 
 * protocol name:ShopMgr
 * protocol version:002
 * protocol author:joxiah joxiah@vip.qq.com 650999056
 * protocol desc:
********************************************************************/

package  com.funoble.myarstation.protocol;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.io.UnsupportedEncodingException;

public class Communicate {
    public static class Communicate_Invalid extends RuntimeException {
        public Communicate_Invalid()
        {
        }
        public Communicate_Invalid(String s)
        {
            super(s);
        }
    }
    public static class String_pair {
        public String s;
        public int len;
    }
    public static interface command {
        int CreateShop = 1;/*  */
        int SearchShopByArea = 2;/*  */
        int SearchShopByClass = 3;/*  */
        int SearchShopByDistance = 4;/*  */
        int ShopDetail = 5;/*  */
        int Comment = 6;/*  */
        int GetComment = 7;/*  */
    }

    public static class Shop {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:Shop Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,id,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            spair.len = Communicate.encode_str2(buffer,name,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,jingdu,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,weidu,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,pic,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:Shop Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,level,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            spair.len = Communicate.encode_str4(buffer,hint,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;


            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:Shop Decode fail: buffer is too short");
            id=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            name = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            jingdu = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            weidu = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            pic = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:Shop Decode fail: buffer is too short");
            level=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            spair = Communicate.decode_str4(buffer,leftsize,offset+buffersize);
            hint = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;


            return buffersize;
        }

        public int id; /*  */
        public String name; /*  */
        public String jingdu; /* 经度 */
        public String weidu; /* 纬度 */
        public String pic; /*  */
        public int level; /* 等级 */
        public String hint; /* 说明 */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class CommentStr {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            spair.len = Communicate.encode_str2(buffer,user,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CommentStr Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,level,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            spair.len = Communicate.encode_str4(buffer,comment,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;


            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            user = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CommentStr Decode fail: buffer is too short");
            level=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            spair = Communicate.decode_str4(buffer,leftsize,offset+buffersize);
            comment = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;


            return buffersize;
        }

        public String user; /*  */
        public int level; /* 等级 */
        public String comment; /* 评论 */

        private String_pair spair = new String_pair();
        private int arraysize;
    };

    public static class CreateShopCS {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            spair.len = Communicate.encode_str2(buffer,name,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CreateShopCS Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,classes,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            spair.len = Communicate.encode_str2(buffer,province,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,city,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,district,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,street,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,jingdu,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,weidu,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,phone,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,email,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CreateShopCS Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,qq,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            spair.len = Communicate.encode_str2(buffer,pic,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CreateShopCS Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,level,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            spair.len = Communicate.encode_str4(buffer,hint,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;


            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            name = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CreateShopCS Decode fail: buffer is too short");
            classes=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            province = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            city = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            district = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            street = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            jingdu = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            weidu = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            phone = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            email = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CreateShopCS Decode fail: buffer is too short");
            qq=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            pic = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CreateShopCS Decode fail: buffer is too short");
            level=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            spair = Communicate.decode_str4(buffer,leftsize,offset+buffersize);
            hint = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;


            return buffersize;
        }

        public String name; /*  */
        public int classes; /* 第一位为乒乓球，第二位位篮球，第三位为网球，可以有32个分类 */
        public String province; /* 省 */
        public String city; /* 市 */
        public String district; /* 区 */
        public String street; /* 街道 */
        public String jingdu; /* 经度 */
        public String weidu; /* 纬度 */
        public String phone; /*  */
        public String email; /*  */
        public int qq; /*  */
        public String pic; /*  */
        public int level; /* 等级 */
        public String hint; /* 说明 */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class CreateShopSC {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(1 > leftsize) 
                throw new Communicate_Invalid("Communicate:CreateShopSC Encode fail: buffer is too short");
            buffer[buffersize+offset]=Result;
            buffersize++;
            leftsize--;


            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(1 > leftsize) 
                throw new Communicate_Invalid("Communicate:CreateShopSC Decode fail: buffer is too short");
            Result=buffer[offset+buffersize];
            buffersize ++;
            leftsize --;


            return buffersize;
        }

        public byte Result; /*  */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class SearchShopByAreaCS {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            spair.len = Communicate.encode_str2(buffer,province,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,city,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,district,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,street,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;


            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            province = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            city = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            district = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            street = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;


            return buffersize;
        }

        public String province; /* 省 */
        public String city; /* 市 */
        public String district; /* 区 */
        public String street; /* 街道 */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class SearchShopByAreaSC {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:SearchShopByAreaSC Encode fail: buffersize is too short");
            Communicate.h2n_16(buffer,(short)Shops.size(),offset+buffersize);
            buffersize+=2;
            leftsize-=2;
            for(int i=0;i<Shops.size();i++){
                spair.len = ((Shop)Shops.get(i)).Encode(buffer,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;
            }

            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:SearchShopByAreaSC Decode fail: buffersize is too short");
            arraysize = Communicate.n2h_16(buffer,offset+buffersize);
            buffersize+=2; leftsize-=2; 
            Shops.clear();
            for(int i=0;i<arraysize;i++){
                Shop stTmp = new Shop();
                spair.len = stTmp.Decode(buffer,leftsize,offset+buffersize);
                Shops.add(stTmp);
                buffersize += spair.len;
                leftsize -= spair.len;
            }

            return buffersize;
        }

        public ArrayList Shops = new ArrayList(); /*  */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class SearchShopByClassCS {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:SearchShopByClassCS Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,classes,offset+buffersize);
            buffersize+=4;
            leftsize-=4;


            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:SearchShopByClassCS Decode fail: buffer is too short");
            classes=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;


            return buffersize;
        }

        public int classes; /* 第一位为乒乓球，第二位位篮球，第三位为网球，可以有32个分类 */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class SearchShopByClassSC {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:SearchShopByClassSC Encode fail: buffersize is too short");
            Communicate.h2n_16(buffer,(short)Shops.size(),offset+buffersize);
            buffersize+=2;
            leftsize-=2;
            for(int i=0;i<Shops.size();i++){
                spair.len = ((Shop)Shops.get(i)).Encode(buffer,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;
            }

            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:SearchShopByClassSC Decode fail: buffersize is too short");
            arraysize = Communicate.n2h_16(buffer,offset+buffersize);
            buffersize+=2; leftsize-=2; 
            Shops.clear();
            for(int i=0;i<arraysize;i++){
                Shop stTmp = new Shop();
                spair.len = stTmp.Decode(buffer,leftsize,offset+buffersize);
                Shops.add(stTmp);
                buffersize += spair.len;
                leftsize -= spair.len;
            }

            return buffersize;
        }

        public ArrayList Shops = new ArrayList(); /*  */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class SearchShopByDistanceCS {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            spair.len = Communicate.encode_str2(buffer,jingdu,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,weidu,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:SearchShopByDistanceCS Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,Distance,offset+buffersize);
            buffersize+=4;
            leftsize-=4;


            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            jingdu = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            weidu = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:SearchShopByDistanceCS Decode fail: buffer is too short");
            Distance=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;


            return buffersize;
        }

        public String jingdu; /* 经度 */
        public String weidu; /* 纬度 */
        public int Distance; /* 用户ID */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class SearchShopByDistanceSC {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:SearchShopByDistanceSC Encode fail: buffersize is too short");
            Communicate.h2n_16(buffer,(short)Shops.size(),offset+buffersize);
            buffersize+=2;
            leftsize-=2;
            for(int i=0;i<Shops.size();i++){
                spair.len = ((Shop)Shops.get(i)).Encode(buffer,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;
            }

            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:SearchShopByDistanceSC Decode fail: buffersize is too short");
            arraysize = Communicate.n2h_16(buffer,offset+buffersize);
            buffersize+=2; leftsize-=2; 
            Shops.clear();
            for(int i=0;i<arraysize;i++){
                Shop stTmp = new Shop();
                spair.len = stTmp.Decode(buffer,leftsize,offset+buffersize);
                Shops.add(stTmp);
                buffersize += spair.len;
                leftsize -= spair.len;
            }

            return buffersize;
        }

        public ArrayList Shops = new ArrayList(); /*  */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class ShopDetailCS {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:ShopDetailCS Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,id,offset+buffersize);
            buffersize+=4;
            leftsize-=4;


            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:ShopDetailCS Decode fail: buffer is too short");
            id=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;


            return buffersize;
        }

        public int id; /*  */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class ShopDetailSC {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            spair.len = Communicate.encode_str2(buffer,name,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:ShopDetailSC Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,classes,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            spair.len = Communicate.encode_str2(buffer,province,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,city,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,district,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,street,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,jingdu,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,weidu,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,phone,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            spair.len = Communicate.encode_str2(buffer,email,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:ShopDetailSC Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,qq,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            spair.len = Communicate.encode_str2(buffer,pic,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:ShopDetailSC Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,level,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            spair.len = Communicate.encode_str4(buffer,hint,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;

            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:ShopDetailSC Encode fail: buffersize is too short");
            Communicate.h2n_16(buffer,(short)comments.size(),offset+buffersize);
            buffersize+=2;
            leftsize-=2;
            for(int i=0;i<comments.size();i++){
                spair.len = ((CommentStr)comments.get(i)).Encode(buffer,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;
            }

            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            name = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:ShopDetailSC Decode fail: buffer is too short");
            classes=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            province = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            city = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            district = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            street = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            jingdu = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            weidu = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            phone = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            email = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:ShopDetailSC Decode fail: buffer is too short");
            qq=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            spair = Communicate.decode_str2(buffer,leftsize,offset+buffersize);
            pic = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:ShopDetailSC Decode fail: buffer is too short");
            level=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            spair = Communicate.decode_str4(buffer,leftsize,offset+buffersize);
            hint = spair.s;
            buffersize += spair.len;
            leftsize -= spair.len;

            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:ShopDetailSC Decode fail: buffersize is too short");
            arraysize = Communicate.n2h_16(buffer,offset+buffersize);
            buffersize+=2; leftsize-=2; 
            comments.clear();
            for(int i=0;i<arraysize;i++){
                CommentStr stTmp = new CommentStr();
                spair.len = stTmp.Decode(buffer,leftsize,offset+buffersize);
                comments.add(stTmp);
                buffersize += spair.len;
                leftsize -= spair.len;
            }

            return buffersize;
        }

        public String name; /*  */
        public int classes; /* 第一位为乒乓球，第二位位篮球，第三位为网球，可以有32个分类 */
        public String province; /* 省 */
        public String city; /* 市 */
        public String district; /* 区 */
        public String street; /* 街道 */
        public String jingdu; /* 经度 */
        public String weidu; /* 纬度 */
        public String phone; /*  */
        public String email; /*  */
        public int qq; /*  */
        public String pic; /*  */
        public int level; /* 等级 */
        public String hint; /* 说明 */
        public ArrayList comments = new ArrayList(); /*  */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class CommentCS {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CommentCS Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,id,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            arraysize = comment.Encode(buffer,leftsize,offset+buffersize);
            buffersize+=arraysize;
                        leftsize-=arraysize;

            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CommentCS Decode fail: buffer is too short");
            id=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            spair.len = comment.Decode(buffer,leftsize,offset+buffersize);
            buffersize += spair.len;
            leftsize -= spair.len;


            return buffersize;
        }

        public int id; /* 商店id */
        public CommentStr comment = new CommentStr(); /*  */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class CommentSC {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CommentSC Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,result,offset+buffersize);
            buffersize+=4;
            leftsize-=4;


            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:CommentSC Decode fail: buffer is too short");
            result=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;


            return buffersize;
        }

        public int result; /* 0成功 其它失败 */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class GetCommentCS {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:GetCommentCS Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,id,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:GetCommentCS Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,index,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:GetCommentCS Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,num,offset+buffersize);
            buffersize+=4;
            leftsize-=4;


            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:GetCommentCS Decode fail: buffer is too short");
            id=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:GetCommentCS Decode fail: buffer is too short");
            index=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:GetCommentCS Decode fail: buffer is too short");
            num=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;


            return buffersize;
        }

        public int id; /* 商店id */
        public int index; /* 从第几条开始 */
        public int num; /* 需要几条 */

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class GetCommentSC {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:GetCommentSC Encode fail: buffersize is too short");
            Communicate.h2n_16(buffer,(short)comments.size(),offset+buffersize);
            buffersize+=2;
            leftsize-=2;
            for(int i=0;i<comments.size();i++){
                spair.len = ((CommentStr)comments.get(i)).Encode(buffer,leftsize,offset+buffersize);
            buffersize+=spair.len;
            leftsize-=spair.len;
            }

            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:GetCommentSC Decode fail: buffersize is too short");
            arraysize = Communicate.n2h_16(buffer,offset+buffersize);
            buffersize+=2; leftsize-=2; 
            comments.clear();
            for(int i=0;i<arraysize;i++){
                CommentStr stTmp = new CommentStr();
                spair.len = stTmp.Decode(buffer,leftsize,offset+buffersize);
                comments.add(stTmp);
                buffersize += spair.len;
                leftsize -= spair.len;
            }

            return buffersize;
        }

        public ArrayList comments = new ArrayList(); /*  */

        private String_pair spair = new String_pair();
        private int arraysize;
    };

    public static class packc {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:packc Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,Len,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:packc Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,LenCheck,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:packc Encode fail: buffer is too short");
            Communicate.h2n_16(buffer,Cmd,offset+buffersize);
            buffersize+=2;
            leftsize-=2;

            switch(Cmd){
            case (short)command.CreateShop:
                spair.len = csCreateShop.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.SearchShopByArea:
                spair.len = csSearchShopByArea.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.SearchShopByClass:
                spair.len = csSearchShopByClass.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.SearchShopByDistance:
                spair.len = csSearchShopByDistance.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.ShopDetail:
                spair.len = csShopDetail.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.Comment:
                spair.len = csComment.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.GetComment:
                spair.len = csGetComment.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            default:
                break;
            }
            Communicate.h2n_32(buffer,buffersize,0);

            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:packc Decode fail: buffer is too short");
            Len=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:packc Decode fail: buffer is too short");
            LenCheck=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:packc Decode fail: buffer is too short");
            Cmd=Communicate.n2h_16(buffer,offset+buffersize);
            buffersize += 2;
            leftsize -= 2;

            switch(Cmd){
            case (short)command.CreateShop:
                arraysize = csCreateShop.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.SearchShopByArea:
                arraysize = csSearchShopByArea.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.SearchShopByClass:
                arraysize = csSearchShopByClass.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.SearchShopByDistance:
                arraysize = csSearchShopByDistance.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.ShopDetail:
                arraysize = csShopDetail.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.Comment:
                arraysize = csComment.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.GetComment:
                arraysize = csGetComment.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            default:
                break;
            }

            return buffersize;
        }

        public int Len; /* 包长字段 */
        public int LenCheck; /* 包长字段校验位 */
        public short Cmd; /* 命令字 */
        public CreateShopCS csCreateShop = new CreateShopCS();
        public SearchShopByAreaCS csSearchShopByArea = new SearchShopByAreaCS();
        public SearchShopByClassCS csSearchShopByClass = new SearchShopByClassCS();
        public SearchShopByDistanceCS csSearchShopByDistance = new SearchShopByDistanceCS();
        public ShopDetailCS csShopDetail = new ShopDetailCS();
        public CommentCS csComment = new CommentCS();
        public GetCommentCS csGetComment = new GetCommentCS();

        private String_pair spair = new String_pair();
        private int arraysize;
    };
    public static class packs {
        public int Encode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:packs Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,Len,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:packs Encode fail: buffer is too short");
            Communicate.h2n_16(buffer,Cmd,offset+buffersize);
            buffersize+=2;
            leftsize-=2;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:packs Encode fail: buffer is too short");
            Communicate.h2n_32(buffer,ret,offset+buffersize);
            buffersize+=4;
            leftsize-=4;

            switch(Cmd){
            case (short)command.CreateShop:
                spair.len = scCreateShop.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.SearchShopByArea:
                spair.len = scSearchShopByArea.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.SearchShopByClass:
                spair.len = scSearchShopByClass.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.SearchShopByDistance:
                spair.len = scSearchShopByDistance.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.ShopDetail:
                spair.len = scShopDetail.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.Comment:
                spair.len = scComment.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            case (short)command.GetComment:
                spair.len = scGetComment.Encode(buffer,leftsize,offset+buffersize);
                buffersize += spair.len;
                leftsize -= spair.len;
                break;
            default:
                break;
            }
            Communicate.h2n_32(buffer,buffersize,0);

            return buffersize;
        }

        public int Decode(byte[] buffer,int leftsize,int offset)
        {
            int buffersize = 0;
            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:packs Decode fail: buffer is too short");
            Len=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            if(2 > leftsize) 
                throw new Communicate_Invalid("Communicate:packs Decode fail: buffer is too short");
            Cmd=Communicate.n2h_16(buffer,offset+buffersize);
            buffersize += 2;
            leftsize -= 2;

            if(4 > leftsize) 
                throw new Communicate_Invalid("Communicate:packs Decode fail: buffer is too short");
            ret=Communicate.n2h_32(buffer,offset+buffersize);
            buffersize += 4;
            leftsize -= 4;

            switch(Cmd){
            case (short)command.CreateShop:
                arraysize = scCreateShop.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.SearchShopByArea:
                arraysize = scSearchShopByArea.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.SearchShopByClass:
                arraysize = scSearchShopByClass.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.SearchShopByDistance:
                arraysize = scSearchShopByDistance.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.ShopDetail:
                arraysize = scShopDetail.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.Comment:
                arraysize = scComment.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            case (short)command.GetComment:
                arraysize = scGetComment.Decode(buffer,leftsize,offset+buffersize);
                buffersize += arraysize;
                leftsize -= arraysize;
                break;
            default:
                break;
            }

            return buffersize;
        }

        public int Len; /* 包长字段 */
        public short Cmd; /* 命令字 */
        public int ret; /* 返回码,在ResultCode中定义 */
        public CreateShopSC scCreateShop = new CreateShopSC();
        public SearchShopByAreaSC scSearchShopByArea = new SearchShopByAreaSC();
        public SearchShopByClassSC scSearchShopByClass = new SearchShopByClassSC();
        public SearchShopByDistanceSC scSearchShopByDistance = new SearchShopByDistanceSC();
        public ShopDetailSC scShopDetail = new ShopDetailSC();
        public CommentSC scComment = new CommentSC();
        public GetCommentSC scGetComment = new GetCommentSC();

        private String_pair spair = new String_pair();
        private int arraysize;
    };

    public packc client = new packc();
    public packs server = new packs();

    public static void memcpy(byte[] dest, byte[] src, int offset)
    {
        for (int i = 0; i < src.length; i ++) {
            dest[offset + i] = src[i];
        }
    }

    public static byte[] getBytes(String s)
    {
        try {
            return s.getBytes("GBK");
        } catch(UnsupportedEncodingException e) {
            return s.getBytes();
        }
    }

    public static String newS(byte[] bytes,int offset,int length)
    {
        try {
            return new String(bytes,offset,length,"GBK");
        } catch(UnsupportedEncodingException e) {
            return new String(bytes,offset,length);
        }
    }

    public static int encode_str(byte[] buffer,String src,int leftsize,int offset)
    {
        int buffersize = 0;
        byte[] b = getBytes(src);
        if(b.length+1 > leftsize)  
            throw new Communicate_Invalid("Communicate:encode_str fail: buffersize is too short");
        memcpy(buffer,b,offset);
        buffersize+=(int)b.length;
        leftsize-=(int)b.length;
        buffer[offset+buffersize] = (byte)b.length;
        buffersize++;
        leftsize--;
        return buffersize;
    }
    public static int encode_str1(byte[] buffer,String src,int leftsize,int offset)
    {
        int buffersize = 0;
        byte[] b = getBytes(src);
        if(b.length+1 > leftsize)  
            throw new Communicate_Invalid("Communicate:encode_str1 fail: buffersize is too short");
        buffer[offset+buffersize] = (byte)b.length;
        buffersize++;
        leftsize--;
        memcpy(buffer,b,offset+buffersize);
        buffersize+=(int)b.length;
        leftsize-=(int)b.length;
        return buffersize;
    }
    public static int encode_str2(byte[] buffer,String src,int leftsize,int offset)
    {
        int buffersize = 0;
        byte[] b = getBytes(src);
        if(b.length+2 > leftsize)  
            throw new Communicate_Invalid("Communicate:encode_str2 fail: buffersize is too short");
        Communicate.h2n_16(buffer,(short)b.length,offset+buffersize);
        buffersize+=2;
        leftsize-=2;
        memcpy(buffer,b,offset+buffersize);
        buffersize+=(int)b.length;
        leftsize-=(int)b.length;
        return buffersize;
    }
    public static int encode_str4(byte[] buffer,String src,int leftsize,int offset)
    {
        int buffersize = 0;
        byte[] b = getBytes(src);
        if(b.length+4 > leftsize) 
            throw new Communicate_Invalid("Communicate:encode_str4 fail: buffersize is too short");
        Communicate.h2n_32(buffer,(int)b.length,offset+buffersize);
        buffersize+=4;
        leftsize-=4;
        memcpy(buffer,b,offset+buffersize);
        buffersize+=(int)b.length;
        leftsize-=(int)b.length;
        return buffersize;
    }

    public static String_pair decode_str(byte[] buffer, int leftsize, int offset)
    {
        int buffersize=0;
        String_pair s = new String_pair();
        s.len = 0;
        for(int i=0;i<leftsize;i++) {
            if(buffer[offset+i] == '\0') {
                s.len = i;
                break;
            }
        }
        if(s.len+1 > leftsize) 
            throw new Communicate_Invalid("Communicate:decode_str fail: buffersize is too short");
        s.s = newS(buffer,(int)(offset+buffersize),(int)s.len);
        s.len++;
        return s;
    }
    public static String_pair decode_str1(byte[] buffer, int leftsize, int offset)
    {
        int buffersize=0;
        String_pair s = new String_pair();
        s.len = (int)buffer[offset];
        buffersize++;
        leftsize--;
        if(s.len > leftsize) 
            throw new Communicate_Invalid("Communicate:decode_str1 fail: buffersize is too short");
        s.s = newS(buffer,(int)(offset+buffersize),(int)s.len);
        s.len++;
        return s;
    }
    public static String_pair decode_str2(byte[] buffer, int leftsize, int offset)
    {
        int buffersize=0;
        String_pair s = new String_pair();
        s.len = (int)Communicate.n2h_16(buffer,offset);
        buffersize+=2;
        leftsize-=2;
        if(s.len > leftsize) 
            throw new Communicate_Invalid("Communicate:decode_str2 fail: buffersize is too short");
        s.s = newS(buffer,(int)(offset+buffersize),(int)s.len);
        s.len+=2;
        return s;
    }
    public static String_pair decode_str4(byte[] buffer, int leftsize, int offset)
    {
        int buffersize=0;
        String_pair s = new String_pair();
        s.len = Communicate.n2h_32(buffer,offset);
        buffersize+=4;
        leftsize-=4;
        if(s.len > leftsize) 
            throw new Communicate_Invalid("Communicate:decode_str4 fail: buffersize is too short");
        s.s = newS(buffer,(int)(offset+buffersize),(int)s.len);
        s.len+=4;
        return s;
    }

    public static void h2n_32(byte[] dest,int i, int offset)
    {
        ByteBuffer bb = ByteBuffer.allocate(4);
        bb.putInt(i);
        byte[] b = bb.array();
        dest[offset] = b[0];
        dest[offset+1] = b[1];
        dest[offset+2] = b[2];
        dest[offset+3] = b[3];
    }
    public static void h2n_16(byte[] dest,short i, int offset)
    {
        ByteBuffer bb = ByteBuffer.allocate(2);
        bb.putShort(i);
        byte[] b = bb.array();
        dest[offset] = b[0];
        dest[offset+1] = b[1];
    }
    public static int n2h_32(byte[] src, int offset)
    {
        ByteBuffer bb = ByteBuffer.wrap(src, offset, 4);
        return bb.getInt();
    }
    public static short n2h_16(byte[] src, int offset)
    {
        ByteBuffer bb = ByteBuffer.wrap(src, offset, 2);
        return bb.getShort();
    }
}

